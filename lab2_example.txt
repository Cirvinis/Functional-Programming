>>> add_vehicle("Car", "Mini", 2009, 241000)
Added Car Mini (2009)
>>> add_vehicle("Car", "Audi", 2008, 330000)
Added Car Audi (2008)
>>> inventory("Car")
Inventory for Car:
Mini (2009)
Audi (2008)

>>> perform_maintenance("Car", "EngineTuneUp", "8 hours")
Performed EngineTuneUp on Car for Hours 8
>>> perform_maintenance("Car", "EngineTuneUp", "1 days")
Performed EngineTuneUp on Car for Days 1
>>> perform_maintenance("Car", "OilChange", "2 hours")
Performed OilChange on Car for Hours 2

>>> sell_vehicle("Car", "Audi", 2008, 5000)
Sold Car Audi (2008) for $5000.0
>>> sell_vehicle("Car", "BMW", 2008, 7500)
Vehicle not found in inventory

>>> inventory("Car")
Inventory for Car:
Mini (2009)

>>> add_vehicle("Car", "Mini", 2009, 241000)
Added Car Mini (2009)
>>> inventory("Car")
Inventory for Car:
Mini (2009)
Mini (2009)

ghci> parseVehicleGarage "add_vehicle (Car, ModelX, 2020, 15000 km); perform_maintenance (Car, OilChange, 2 hours)"
Right (Sequence [AddVehicle Car "ModelX" 2020 15000, PerformMaintenance Car OilChange (Hours 2)])
ghci> parseVehicleGarage "add_vehicle (Truck, ModelY, 2018, 30000 km)"
Right (Sequence [AddVehicle Truck "ModelY" 2018 30000])
ghci> parseVehicleGarage ""
Left "Unrecognized command"

ghci> parseTaskList "add_vehicle (Car, ModelX, 2020, 15000 km); perform_maintenance (Car, OilChange, 2 hours)"
Right ([AddVehicle Car "ModelX" 2020 15000, PerformMaintenance Car OilChange (Hours 2)], "")
ghci> parseTaskList "add_vehicle (Truck, ModelY, 2018, 30000 km)"
Right ([AddVehicle Truck "ModelY" 2018 30000], "")
ghci> parseTaskList ""
Left "Unrecognized command"

ghci> parseTask "add_vehicle (Car, ModelX, 2020, 15000 km)"
Right (AddVehicle Car "ModelX" 2020 15000, "")
ghci> parseTask "perform_maintenance (Car, OilChange, 2 hours)"
Right (PerformMaintenance Car OilChange (Hours 2), "")
ghci> parseTask "sell_vehicle (Car, ModelX, 2020, 15000.50)"
Right (SellVehicle Car "ModelX" 2020 15000.5, "")
ghci> parseTask "inventory (Car)"
Right (Inventory Car, "")
ghci> parseTask "view ()"
Right (View, "")
ghci> parseTask ""
Left "Failed to parse task"

ghci> parseAddVehicle "add_vehicle (Car, ModelX, 2020, 15000 km)"
Right (AddVehicle Car "ModelX" 2020 15000, "")
ghci> parseAddVehicle "add_vehicle (Truck, ModelY, 2018, 30000 km)"
Right (AddVehicle Truck "ModelY" 2018 30000, "")
ghci> parseAddVehicle "add_vehicle (Car, ModelX, twenty, 15000 km)"
Left "Expected an integer"

ghci> parsePerformMaintenance "perform_maintenance (Car, OilChange, 2 hours)"
Right (PerformMaintenance Car OilChange (Hours 2), "")
ghci> parsePerformMaintenance "perform_maintenance (Truck, TireRotation, 30 minutes)"
Left "Failed to parse duration unit"

ghci> parseSellVehicle "sell_vehicle (Car, ModelX, 2020, 15000.50)"
Right (SellVehicle Car "ModelX" 2020 15000.5, "")
ghci> parseSellVehicle "sell_vehicle (Truck, ModelY, 2015, 12000)"
Left "Expected '.' for price"
ghci> parseSellVehicle "sell_vehicle (Car, ModelX, twenty, 15000.50)"
Left "Expected an integer"

ghci> parseInventory "inventory (Car)"
Right (Inventory Car, "")
ghci> parseInventory "inventory (Truck)"
Right (Inventory Truck, "")
ghci> parseInventory "inventory (Bicycle)"
Left "Failed to parse vehicle type"

ghci> parseView "view ()"
Right (View, "")
ghci> parseView "view ("
Left "Unexpected end of input"

ghci> parseVehicleType "Car"
Right (Car, "")
ghci> parseVehicleType "Truck"
Right (Truck, "")
ghci> parseVehicleType "Motorcycle"
Right (Motorcycle, "")
ghci> parseVehicleType "SUV"
Right (SUV, "")
ghci> parseVehicleType ""
Left "Failed to parse vehicle type"
ghci> parseVehicleType "abc"
Left "Failed to parse vehicle type"

ghci> parseString "\"Hello\""
Right ("Hello", "")
ghci> parseString "\"World\""
Right ("World", "")
ghci> parseString ""
Right ("", "")
ghci> parseString "Hello"
Right ("Hello", "")

ghci> parseInt "123"
Right (123, "")
ghci> parseInt "456"
Right (456, "")
ghci> parseInt ""
Left "Expected an integer"

ghci> parseMileage "15000km"
Right (15000, "")
ghci> parseMileage "30000 km"
Right (30000, "")
ghci> parseMileage ""
Left "Expected an integer"

ghci> parseMaintenanceType "OilChange"
Right (OilChange, "")
ghci> parseMaintenanceType "TireRotation"
Right (TireRotation, "")
ghci> parseMaintenanceType "BrakeInspection"
Right (BrakeInspection, "")
ghci> parseMaintenanceType "EngineTuneUp"
Right (EngineTuneUp, "")
ghci> parseMaintenanceType ""
Left "Failed to parse maintenance type"
ghci> parseMaintenanceType "abc"
Left "Failed to parse maintenance type"

ghci> parseDuration "2 hours"
Right (Hours 2, "")
ghci> parseDuration "3 days"
Right (Days 3, "")
ghci> parseDuration ""
Left "Expected an integer"

ghci> parsePrice "15000.50"
Right (15000.5, "")
ghci> parsePrice "12000.75"
Right (12000.75, "")
ghci> parsePrice ""
Left "Expected a number"

ghci> and3' (\a b c -> (a, b, c)) (parseChar 'a') (parseChar 'b') (parseChar 'c') "abc"
Right (('a', 'b', 'c'), "")
ghci> and3' (\a b c -> (a, b, c)) (parseChar 'a') (parseChar 'b') (parseChar 'c') "ab"
Left "Unexpected end of input"

ghci> and4' (\a b c d -> (a, b, c, d)) (parseChar 'a') (parseChar 'b') (parseChar 'c') (parseChar 'd') "abcd"
Right (('a', 'b', 'c', 'd'), "")
ghci> and4' (\a b c d -> (a, b, c, d)) (parseChar 'a') (parseChar 'b') (parseChar 'c') (parseChar 'd') "abc"
Left "Unexpected end of input"

ghci> and8' (\a b c d e f g h -> (a, b, c, d, e, f, g, h)) (parseChar 'a') (parseChar 'b') (parseChar 'c') (parseChar 'd') (parseChar 'e') (parseChar 'f') (parseChar 'g') (parseChar 'h') "abcdefgh"
Right (('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'), "")
ghci> and8' (\a b c d e f g h -> (a, b, c, d, e, f, g, h)) (parseChar 'a') (parseChar 'b') (parseChar 'c') (parseChar 'd') (parseChar 'e') (parseChar 'f') (parseChar 'g') (parseChar 'h') "abcdefg"
Left "Unexpected end of input"

ghci> and10' (\a b c d e f g h i j -> (a, b, c, d, e, f, g, h, i, j)) (parseChar 'a') (parseChar 'b') (parseChar 'c') (parseChar 'd') (parseChar 'e') (parseChar 'f') (parseChar 'g') (parseChar 'h') (parseChar 'i') (parseChar 'j') "abcdefghij"
Right (('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'), "")
ghci> and10' (\a b c d e f g h i j -> (a, b, c, d, e, f, g, h, i, j)) (parseChar 'a') (parseChar 'b') (parseChar 'c') (parseChar 'd') (parseChar 'e') (parseChar 'f') (parseChar 'g') (parseChar 'h') (parseChar 'i') (parseChar 'j') "abcdefghi"
Left "Unexpected end of input"

ghci> or6' (parseChar 'a') (parseChar 'b') (parseChar 'c') (parseChar 'd') (parseChar 'e') (parseChar 'f') "a"
Right ('a', "")
ghci> or6' (parseChar 'a') (parseChar 'b') (parseChar 'c') (parseChar 'd') (parseChar 'e') (parseChar 'f') "b"
Right ('b', "")
ghci> or6' (parseChar 'a') (parseChar 'b') (parseChar 'c') (parseChar 'd') (parseChar 'e') (parseChar 'f') "f"
Right ('f', "")
ghci> or6' (parseChar 'a') (parseChar 'b') (parseChar 'c') (parseChar 'd') (parseChar 'e') (parseChar 'f') "g"
Left "Expected 'a'; Expected 'b'; Expected 'c'; Expected 'd'; Expected 'e'; Expected 'f'"

ghci> emptyState
State {vehicles = [], inventory = []}

ghci> skipSpaces "   Hello"
"Hello"
ghci> skipSpaces "World"
"World"

ghci> parseLiteral "Hello" "HelloWorld"
Right ("Hello", "World")
ghci> parseLiteral "Hello" "World"
Left "Expected \"Hello\", but found \"World\""

ghci> parseChar 'H' "Hello"
Right ('H', "ello")
ghci> parseChar 'H' "World"
Left "Expected 'H', but found 'W'"
ghci> parseChar 'H' "World"
Left "Expected 'H', but found 'W'"

ghci> parseQuery "add_vehicle (Car, ModelX, 2020, 15000 km); perform_maintenance (Car, OilChange, 2 hours)"
Right (Sequence [AddVehicle Car "ModelX" 2020 15000, PerformMaintenance Car OilChange (Hours 2)])
ghci> parseQuery "sell_vehicle (Car, ModelX, 2020, 15000.50)"
Right (Sequence [SellVehicle Car "ModelX" 2020 15000.5])
ghci> parseQuery "inventory (Car)"
Right (Sequence [Inventory Car])
ghci> parseQuery "view ()"
Right (Sequence [View])

ghci> let initialState = emptyState
ghci> let parsedQuery = parseQuery "add_vehicle (Car, ModelX, 2020, 15000 km)"
ghci> let result1 = either Left (stateTransition initialState) parsedQuery
ghci> result1
Right (Just "Added Car ModelX (2020)",State {vehicles = [(Car,"ModelX",2020,15000)], inventory = [(Car,1)]})

ghci> let (Right (_, state1)) = result1
ghci> let query2 = parseQuery "perform_maintenance (Car, OilChange, 3 hours)"
ghci> let result2 = either Left (stateTransition state1) query2
ghci> result2
Right (Just "Performed OilChange on Car for Hours 3",State {vehicles = [(Car,"ModelX",2020,15000)], inventory = [(Car,1)]})

ghci> combineMessages (Just "Message1") (Just "Message2")
Just "Message1\nMessage2"
ghci> combineMessages (Just "Message1") Nothing
Just "Message1"
ghci> combineMessages Nothing (Just "Message2")
Just "Message2"
ghci> combineMessages Nothing Nothing
Nothing

ghci> addToInventory Car 1 []
[(Car,1)]
ghci> addToInventory Car 1 [(Truck, 2)]
[(Truck,2),(Car,1)]
ghci> addToInventory Car 1 [(Car, 2)]
[(Car,3)]

ghci> removeFromInventory Car 1 []
[]
ghci> removeFromInventory Car 1 [(Truck, 2)]
[(Truck,2)]
ghci> removeFromInventory Car 1 [(Car, 2)]
[(Car,1)]
ghci> removeFromInventory Car 2 [(Car, 2)]
[]
ghci> removeFromInventory Car 3 [(Car, 2)]
[]